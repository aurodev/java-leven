#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 10, local_size_y = 10, local_size_z = 10) in;

struct DensityPrimitive
{
    vec4 position;
    vec4 size;
};

layout (std430, binding = 0) buffer layoutName {
    int permutations[];
};

layout (std430, binding = 1) buffer primitivesLayout{
    DensityPrimitive primitiveMods[];
};

layout (std430, binding = 2) buffer layoutMaterial {
    int elem[];
} cornerMaterials;

int N = 2;
uniform int simpleScale;  //primitiveModCount
uniform vec3 offcet;

vec3 Grad3[] = {
    vec3(1,1,0), vec3(-1,1,0), vec3(1,-1,0), vec3(-1,-1,0),
    vec3(1,0,1), vec3(-1,0,1), vec3(1,0,-1), vec3(-1,0,-1),
    vec3(0,1,1), vec3(0,-1,1), vec3(0,1,-1), vec3(0,-1,-1)
};

float Box(vec3 worldPosition, vec3 origin, vec3 halfDimensions)
{
    vec3 local_pos = worldPosition - origin;
    vec3 pos = local_pos;

    vec3 d = vec3(abs(pos.x), abs(pos.y), abs(pos.z)) - halfDimensions;
    float m = max(d.x, max(d.y, d.z));
    return min(m, length(max(d, vec3(0, 0, 0))));
}

float Sphere(vec3 worldPosition, vec3 origin, float radius)
{
    return length(worldPosition - origin) - radius;
}

float Cylinder(vec3 worldPosition, vec3 origin, vec3 size)
{
    vec3 p = worldPosition - origin;

    if (Box(worldPosition, origin, size) > 0.0f)
    return 1;

    float sqr_dist = (p.x * p.x + p.z * p.z);
    float sqr_rad = size.x * size.x;
    return sqr_dist - sqr_rad;
}

float Torus(vec3 worldPosition, vec3 origin)
{
    vec3 local_pos = worldPosition - origin;
    float xt = local_pos.x;
    float yt = local_pos.y;
    float zt = local_pos.z;
    float _radius = 10.0f;
    float _radius2 = 2.33f;

    float x = xt;
    float y = yt;
    float z = zt;

    float x2 = sqrt(x * x + z * z) - _radius / 2.0f;
    float d = x2 * x2 + y * y - _radius2 * _radius2;

    return d;
}

float Perlin(float x, float y)
{
    int i = x > 0 ? int(x) : int(x) - 1;
    int j = y > 0 ? int(y) : int(y) - 1;

    x = x - i;
    y = y - j;

    i = i & 255;
    j = j & 255;

int gll = permutations[i + permutations[j]] % 12;
int glh = permutations[i + permutations[j + 1]] % 12;
int ghl = permutations[i + 1 + permutations[j]] % 12;
int ghh = permutations[i + 1 + permutations[j + 1]] % 12;

float nll = (Grad3[gll].x * x) + (Grad3[gll].y * y);
float nlh = (Grad3[glh].x * x) + (Grad3[glh].y * (y - 1));
float nhl = (Grad3[ghl].x * (x - 1)) + (Grad3[ghl].y * y);
float nhh = (Grad3[ghh].x * (x - 1)) + (Grad3[ghh].y * (y - 1));

float u = float(x * x * x * (x * (x * 6 - 15) + 10));
float v = float(y * y * y * (y * (y * 6 - 15) + 10));

//float nyl = Mathf.Lerp(nll, nhl, u);
float nyl = (1-u)*nll + u*nhl;
//float nyh = Mathf.Lerp(nlh, nhh, u);
float nyh = (1-u)*nlh + u*nhh;

//float nxy = Mathf.Lerp(nyl, nyh, v);
float nxy = (1-v)*nyl + v*nyh;

return nxy;
}

float Vec3Dot(vec3 a, vec3 b)
{
    float res = (a.x * b.x) + (a.y * b.y) + (a.z * b.z);
    return res;
}

float lerp(float a, float b, float t)
{
    return (1 - t) * a + t * b;
}

float FractalNoise(int octaves, float frequency, float lacunarity, float persistence, vec2 position)
{
    float SCALE = 1.0f / 128.0f;
    vec2 p = position * SCALE;
    float nois = 0.0f;

    float amplitude = 1.0f;
    p *= frequency;

    for (int i = 0; i < octaves; i++)
    {
        nois += Perlin(p.x, p.y) * amplitude;
        p *= lacunarity;
        amplitude *= persistence;
    }

    return 0.5f + (0.5f * nois);
}

//float CalculateNoiseValue(vec3 pos, float scale)
//{
//    return FractalNoise(4, 0.5343f, 2.2324f, 0.68324f, pos * scale);
//}

float CLerp(float a, float b, float t)
{
    return (1 - t) * a + t * b;
}

float Density_Func(vec2 pos){
    return FractalNoise(4, 0.5343f, 2.2324f, 0.68324f, pos);
}
/*
float Density_Func(vec3 worldPosition)
{
    float worldRadius = 200.0f;
    vec3 world = worldPosition - vec3(0, -worldRadius, 0);
    float worldDist = -worldRadius + length(world);

    float flatlandNoiseScale = 1.0f;
    float flatlandLerpAmount = 0.07f;
    float flatlandYPercent = 1.2f;

    float rockyNoiseScale = 1.5f;
    float rockyLerpAmount = 0.05f;
    float rockyYPercent = 0.7f;

    float maxMountainMixLerpAmount = 0.075f;
    float minMountainMixLerpAmount = 1.0f;

    float mountainBlend = 0.0f;
    float rockyBlend = 1.0f;

    //mountainBlend = saturate(abs(FractalNoise(0.5343f, 2.2324f, 0.68324f, world * 0.11f)) * 4.0f);
    mountainBlend = clamp(abs(FractalNoise(0.5343f, 2.2324f, 0.68324f, world)) * 4.0f, 0.0, 1.0);

    float mountain = CalculateNoiseValue(world, 0.07f);

    float blob = CalculateNoiseValue(world, flatlandNoiseScale + ((rockyNoiseScale - flatlandNoiseScale) * rockyBlend));
    blob = CLerp(blob, (worldDist) * (flatlandYPercent + ((rockyYPercent - flatlandYPercent) * rockyBlend)),
    flatlandLerpAmount + ((rockyLerpAmount - flatlandLerpAmount) * rockyBlend));

    float result = ((worldDist) / worldRadius) + CLerp(mountain, blob, minMountainMixLerpAmount + ((maxMountainMixLerpAmount - minMountainMixLerpAmount) * mountainBlend));

    for (int i = 0; i < primitiveMods.length(); i++) //////////////////// NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
    {
        float primitive = 0;
        //type
        bool primChosen = primitiveMods[i].position.w == 0 || primitiveMods[i].position.w == 1 || primitiveMods[i].position.w == 2;

        if (primChosen)
        {
            if (primitiveMods[i].position.w == 0)
            {
                primitive = Box(worldPosition, vec3(primitiveMods[i].position.x, primitiveMods[i].position.y, primitiveMods[i].position.z),
                vec3(primitiveMods[i].size.x, primitiveMods[i].size.y, primitiveMods[i].size.z));
            }
            else if (primitiveMods[i].position.w == 1)
            {
                primitive = Sphere(worldPosition, vec3(primitiveMods[i].position.x, primitiveMods[i].position.y, primitiveMods[i].position.z),
                primitiveMods[i].size.x);
            }
            else if (primitiveMods[i].position.w == 2)
            {
                primitive = Cylinder(worldPosition, vec3(primitiveMods[i].position.x, primitiveMods[i].position.y, primitiveMods[i].position.z),
                vec3(primitiveMods[i].size.x, primitiveMods[i].size.y, primitiveMods[i].size.z));
            }

            if (primitiveMods[i].size.w == 0)
            {
                result = max(-primitive, result);
            }
            else
            {
                result = min(primitive, result);
            }
        }
    }

    return result;
}
*/

void main(void){
    int fieldSize = 66;
    uint index = gl_GlobalInvocationID.x + fieldSize * (gl_GlobalInvocationID.y + fieldSize * gl_GlobalInvocationID.z);

    vec3 cornerPos = vec3(gl_GlobalInvocationID.x * simpleScale,
                            gl_GlobalInvocationID.y * simpleScale,
                            gl_GlobalInvocationID.z * simpleScale
    );
    vec3 pos = cornerPos + offcet;
    float noise = Density_Func(vec2(pos.x, pos.z));
    float MAX_HEIGHT = 20.0f;
    float density = pos.y - noise * MAX_HEIGHT - 40;
    int material = density < 0.0f ? 1 : 0;
    cornerMaterials.elem[index] = material;

    //cornerMaterials.elem[index] = int(index);
}